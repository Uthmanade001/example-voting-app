name: Deploy to EC2 via SSM

on:
  workflow_run:
    workflows: ["Build and Push to ECR"]  # must match Workflow 1's name
    types: [completed]
  workflow_dispatch: {}

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Send SSM deploy command
        id: ssm
        run: |
          CMD_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy example-voting-app" \
            --parameters commands='[
              "aws ecr get-login-password --region '${{ secrets.AWS_REGION }}' | docker login --username AWS --password-stdin '${{ secrets.ECR_REGISTRY }}'",
              "cd /opt/vote",
              "docker compose pull",
              "docker compose up -d",
              "docker compose ps"
            ]' \
            --query "Command.CommandId" \
            --output text)
          echo "CMD_ID=$CMD_ID" >> $GITHUB_OUTPUT

      - name: Wait for command to finish
        run: |
          aws ssm wait command-executed \
            --command-id "${{ steps.ssm.outputs.CMD_ID }}" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}"
          aws ssm get-command-invocation \
            --command-id "${{ steps.ssm.outputs.CMD_ID }}" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --query '{Status:Status, StdOut:StandardOutputContent, StdErr:StandardErrorContent}' \
            --output text
