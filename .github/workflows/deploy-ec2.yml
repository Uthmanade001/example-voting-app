name: Deploy to EC2 via SSM

on:
  workflow_run:
    workflows: ["Build & Push to ECR"]   # must match your build workflow name
    types: [completed]
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

jobs:
  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-ec2
      cancel-in-progress: true

    steps:
      - name: Checkout repo (for metadata only)
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Resolve IMAGE_TAG (built commit when auto-triggered)
        id: tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
        echo "IMAGE_TAG=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_ENV
          else
        echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
          fi
          echo "Using IMAGE_TAG=${IMAGE_TAG}"

      - name: Send SSM Run Command (simple)
        id: ssm
        shell: bash
        run: |
          set -euo pipefail
          CMD_ID=$(aws ssm send-command \
        --instance-ids "${EC2_INSTANCE_ID}" \
        --document-name "AWS-RunShellScript" \
        --comment "Deploy example-voting-app ${IMAGE_TAG}" \
        --parameters commands='[
          "sudo systemctl enable --now docker || true",
          "cd /opt/vote",

          # CloudWatch log group (safe if already exists)
          "aws logs create-log-group --log-group-name /example-voting-app || true",

          # Write docker-compose.override.yml to add awslogs driver
          "printf '\''%s\\n'\'' \
    services: \
      vote: \
        logging: \
      driver: awslogs \
      options: \
        awslogs-region: eu-west-2 \
        awslogs-group: /example-voting-app \
        awslogs-stream: vote \
        awslogs-create-group: \"true\" \
      result: \
        logging: \
      driver: awslogs \
      options: \
        awslogs-region: eu-west-2 \
        awslogs-group: /example-voting-app \
        awslogs-stream: result \
        awslogs-create-group: \"true\" \
      worker: \
        logging: \
      driver: awslogs \
      options: \
        awslogs-region: eu-west-2 \
        awslogs-group: /example-voting-app \
        awslogs-stream: worker \
        awslogs-create-group: \"true\"" \
    > docker-compose.override.yml",

          # .env for compose (from your GitHub Secrets + tag)
          "echo ECR_REGISTRY='${ECR_REGISTRY}' > .env",
          "echo IMAGE_TAG='${IMAGE_TAG}' >> .env",
          "echo POSTGRES_USER='${POSTGRES_USER}' >> .env",
          "echo POSTGRES_PASSWORD='${POSTGRES_PASSWORD}' >> .env",
          "echo POSTGRES_DB='${POSTGRES_DB}' >> .env",

          # Deploy
          "aws ecr get-login-password --region '${AWS_REGION}' | docker login --username AWS --password-stdin '${ECR_REGISTRY}'",
          "docker compose pull",
          "docker compose up -d",
          "docker compose ps"
        ]' \
        --query "Command.CommandId" \
        --output text)
          echo "command_id=$CMD_ID" >> $GITHUB_OUTPUT
          echo "SSM command sent: $CMD_ID"
